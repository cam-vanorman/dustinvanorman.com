{"version":3,"sources":["../bower_components/Chart.js/Chart.js"],"names":["root","this","previous","Chart","context","canvas","ctx","computeDimension","element","dimension","document","defaultView","getComputedStyle","getPropertyValue","width","height","aspectRatio","helpers","retinaScale","defaults","global","animation","animationSteps","animationEasing","showScale","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","scaleLineColor","scaleLineWidth","scaleShowLabels","scaleLabel","scaleIntegersOnly","scaleBeginAtZero","scaleFontFamily","scaleFontSize","scaleFontStyle","scaleFontColor","responsive","maintainAspectRatio","showTooltips","customTooltips","tooltipEvents","tooltipFillColor","tooltipFontFamily","tooltipFontSize","tooltipFontStyle","tooltipFontColor","tooltipTitleFontFamily","tooltipTitleFontSize","tooltipTitleFontStyle","tooltipTitleFontColor","tooltipYPadding","tooltipXPadding","tooltipCaretSize","tooltipCornerRadius","tooltipXOffset","tooltipTemplate","multiTooltipTemplate","multiTooltipKeyBackground","onAnimationProgress","onAnimationComplete","types","each","loopable","callback","self","additionalArgs","Array","prototype","slice","call","arguments","length","i","apply","concat","item","clone","obj","objClone","value","key","hasOwnProperty","extend","base","extensionObject","merge","master","args","unshift","indexOf","arrayToSearch","inherits","where","collection","filterCallback","filtered","push","findNextWhere","startIndex","currentItem","findPreviousWhere","extensions","parent","ChartElement","constructor","Surrogate","__super__","noop","uid","id","warn","str","window","console","amd","define","isNumber","n","isNaN","parseFloat","isFinite","max","array","Math","min","getDecimalPlaces","cap","valueToCap","maxValue","minValue","num","toString","split","toRadians","radians","degrees","PI","aliasPixel","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","x","distanceFromYCenter","y","radialDistanceFromCenter","sqrt","angle","atan2","distance","pixelWidth","calculateOrderOfMagnitude","splineCurve","FirstPoint","MiddlePoint","AfterPoint","t","d01","pow","d12","fa","fb","inner","outer","val","floor","log","LN10","template","calculateScaleRange","valuesArray","drawingSize","textSize","startFromZero","integersOnly","minSteps","maxSteps","skipFitting","valueRange","abs","rangeOrderOfMagnitude","graphMax","ceil","graphMin","graphRange","stepValue","numberOfSteps","round","steps","templateString","valuesObject","tmpl","data","fn","test","Function","replace","join","cache","easingEffects","generateLabels","labelsArray","labelTemplateString","index","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","s","p","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","addEvent","animationLoop","totalSteps","easingString","onProgress","onComplete","chartInstance","currentStep","easingFunction","animationFrame","stepDecimal","easeDecimal","getRelativePosition","evt","mouseX","mouseY","e","originalEvent","currentTarget","srcElement","boundingRect","getBoundingClientRect","touches","clientX","left","clientY","top","node","eventType","method","addEventListener","attachEvent","removeEvent","handler","removeEventListener","detachEvent","unbindEvents","bindEvents","arrayOfEvents","events","eventName","chart","getMaximumWidth","domNode","container","parentNode","clientWidth","getMaximumHeight","clientHeight","getMaximumSize","devicePixelRatio","style","scale","clear","clearRect","fontString","pixelSize","fontStyle","fontFamily","longestText","font","arrayOfStrings","longest","string","textWidth","measureText","drawRoundedRectangle","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","instances","Type","options","resize","initialize","stop","newWidth","newHeight","reflow","render","draw","generateLegend","legendTemplate","destroy","removeProperty","removeAttribute","showTooltip","ChartElements","forceRedraw","activeElements","isChanged","Elements","changed","datasets","dataArray","dataIndex","points","bars","segments","tooltipLabels","tooltipColors","medianPosition","dataCollection","xMax","yMax","xMin","yMin","xPositions","yPositions","dataset","hasValue","fill","_saved","fillColor","stroke","strokeColor","MultiTooltip","xPadding","yPadding","xOffset","textColor","fontSize","titleTextColor","titleFontFamily","titleFontStyle","titleFontSize","cornerRadius","labels","legendColors","legendColorBackground","title","label","custom","Element","tooltipPosition","Tooltip","caretHeight","text","toBase64Image","toDataURL","ChartType","name","chartName","baseDefaults","config","configuration","save","restore","props","update","newProps","transition","ease","Point","display","inRange","chartX","chartY","hitDetectionRange","hitDetectionRadius","arc","strokeStyle","lineWidth","strokeWidth","fillStyle","Arc","pointRelativePosition","betweenAngles","startAngle","endAngle","withinRadius","innerRadius","outerRadius","centreAngle","rangeFromCentre","animationPercent","lineJoin","showStroke","Rectangle","halfWidth","leftX","rightX","halfStroke","xAlign","yAlign","caretPadding","tooltipWidth","tooltipRectHeight","tooltipHeight","tooltipX","tooltipY","textAlign","textBaseline","fillText","titleFont","titleWidth","labelWidth","longestTextWidth","halfHeight","getLineHeight","baseLineHeight","afterTitleIndex","fillRect","Scale","fit","buildYLabels","yLabels","stepDecimalPlaces","toFixed","yLabelWidth","showLabels","addXLabel","xLabels","valuesCount","removeXLabel","shift","startPoint","endPoint","padding","cachedYLabelWidth","cachedHeight","calculateYRange","calculateXLabelRotation","firstRotated","lastRotated","firstWidth","lastWidth","xScalePaddingRight","xScalePaddingLeft","xLabelRotation","cosRotation","originalLabelWidth","xLabelWidth","xGridWidth","calculateX","drawingArea","calculateY","scalingFactor","innerWidth","valueWidth","valueOffset","offsetGridLines","yLabelGap","xStart","labelString","yLabelCenter","linePositionY","drawHorizontalLine","showHorizontalLines","gridLineWidth","gridLineColor","lineColor","xPos","linePos","isRotated","drawVerticalLine","showVerticalLines","translate","rotate","RadialScale","size","backdropPaddingY","calculateCenterOffset","lineArc","setScaleSize","getCircumference","pointPosition","halfTextWidth","furthestRightIndex","furthestRightAngle","furthestLeftIndex","furthestLeftAngle","xProtrusionLeft","xProtrusionRight","radiusReductionRight","radiusReductionLeft","largestPossibleRadius","pointLabelFontSize","furthestRight","furthestLeft","pointLabelFontStyle","pointLabelFontFamily","getPointPosition","getIndexAngle","setCenterPoint","leftMovement","rightMovement","maxRight","maxLeft","xCenter","yCenter","angleMultiplier","distanceFromCenter","thisAngle","yCenterOffset","yHeight","showLabelBackdrop","backdropColor","backdropPaddingX","fontColor","angleLineWidth","angleLineColor","outerPosition","pointLabelPosition","pointLabelFontColor","labelsCount","halfLabelsCount","quarterLabelsCount","upperHalf","exactQuarter","timeout","instance","module","exports","noConflict","defaultConfig","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","ScaleClass","calculateBarX","datasetCount","datasetIndex","barIndex","xWidth","calculateBaseWidth","xAbsolute","barWidth","calculateBarWidth","baseWidth","activeBars","type","getBarsAtEvent","eachBars","bar","activeBar","highlightFill","highlightStroke","BarClass","datasetObject","dataPoint","datasetLabel","buildScale","activeElement","barsArray","eventPosition","datasetIterator","dataTotal","values","scaleOptions","beginAtZero","currentHeight","updatedRanges","addData","removeData","newScaleProps","easingDecimal","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animateRotate","animateScale","SegmentArc","activeSegments","getSegmentsAtEvent","segment","activeSegment","highlightColor","calculateTotal","datapoint","segmentsArray","location","atIndex","silent","splice","color","highlight","circumference","calculateCircumference","total","indexToDelete","animDecimal","Doughnut","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","PointClass","activePoints","getPointsAtEvent","eachPoints","point","activePoint","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","pointsArray","nextPoint","previousPoint","pointsWithValues","tension","controlPoints","bezierCurveTo","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackdropPaddingY","scaleBackdropPaddingX","scaleShowLine","updateScaleRange","datapoints","scaleSizes","angleShowLineOut","activePointsCollection","mousePosition","fromCenter","anglePerIndex","pointIndex","totalDataArray"],"mappings":"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","file":"Chart.js","sourcesContent":["/*!\n * Chart.js\n * http://chartjs.org/\n * Version: 1.0.2\n *\n * Copyright 2015 Nick Downie\n * Released under the MIT license\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\n */\n\n\n(function(){\n\n\t\"use strict\";\n\n\t//Declare root variable - window in the browser, global on the server\n\tvar root = this,\n\t\tprevious = root.Chart;\n\n\t//Occupy the global variable of Chart, and create a simple base class\n\tvar Chart = function(context){\n\t\tvar chart = this;\n\t\tthis.canvas = context.canvas;\n\n\t\tthis.ctx = context;\n\n\t\t//Variables global to the chart\n\t\tvar computeDimension = function(element,dimension)\n\t\t{\n\t\t\tif (element['offset'+dimension])\n\t\t\t{\n\t\t\t\treturn element['offset'+dimension];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn document.defaultView.getComputedStyle(element).getPropertyValue(dimension);\n\t\t\t}\n\t\t}\n\n\t\tvar width = this.width = computeDimension(context.canvas,'Width');\n\t\tvar height = this.height = computeDimension(context.canvas,'Height');\n\n\t\t// Firefox requires this to work correctly\n\t\tcontext.canvas.width  = width;\n\t\tcontext.canvas.height = height;\n\n\t\tvar width = this.width = context.canvas.width;\n\t\tvar height = this.height = context.canvas.height;\n\t\tthis.aspectRatio = this.width / this.height;\n\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\n\t\thelpers.retinaScale(this);\n\n\t\treturn this;\n\t};\n\t//Globally expose the defaults to allow for user updating/changing\n\tChart.defaults = {\n\t\tglobal: {\n\t\t\t// Boolean - Whether to animate the chart\n\t\t\tanimation: true,\n\n\t\t\t// Number - Number of animation steps\n\t\t\tanimationSteps: 60,\n\n\t\t\t// String - Animation easing effect\n\t\t\tanimationEasing: \"easeOutQuart\",\n\n\t\t\t// Boolean - If we should show the scale at all\n\t\t\tshowScale: true,\n\n\t\t\t// Boolean - If we want to override with a hard coded scale\n\t\t\tscaleOverride: false,\n\n\t\t\t// ** Required if scaleOverride is true **\n\t\t\t// Number - The number of steps in a hard coded scale\n\t\t\tscaleSteps: null,\n\t\t\t// Number - The value jump in the hard coded scale\n\t\t\tscaleStepWidth: null,\n\t\t\t// Number - The scale starting value\n\t\t\tscaleStartValue: null,\n\n\t\t\t// String - Colour of the scale line\n\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",\n\n\t\t\t// Number - Pixel width of the scale line\n\t\t\tscaleLineWidth: 1,\n\n\t\t\t// Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels: true,\n\n\t\t\t// Interpolated JS string - can access value\n\t\t\tscaleLabel: \"<%=value%>\",\n\n\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there\n\t\t\tscaleIntegersOnly: true,\n\n\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\t\tscaleBeginAtZero: false,\n\n\t\t\t// String - Scale label font declaration for the scale label\n\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Scale label font size in pixels\n\t\t\tscaleFontSize: 12,\n\n\t\t\t// String - Scale label font weight style\n\t\t\tscaleFontStyle: \"normal\",\n\n\t\t\t// String - Scale label font colour\n\t\t\tscaleFontColor: \"#666\",\n\n\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.\n\t\t\tresponsive: false,\n\n\t\t\t// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n\t\t\tmaintainAspectRatio: true,\n\n\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove\n\t\t\tshowTooltips: true,\n\n\t\t\t// Boolean - Determines whether to draw built-in tooltip or call custom tooltip function\n\t\t\tcustomTooltips: false,\n\n\t\t\t// Array - Array of string names to attach tooltip events\n\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],\n\n\t\t\t// String - Tooltip background colour\n\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",\n\n\t\t\t// String - Tooltip label font declaration for the scale label\n\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip label font size in pixels\n\t\t\ttooltipFontSize: 14,\n\n\t\t\t// String - Tooltip font weight style\n\t\t\ttooltipFontStyle: \"normal\",\n\n\t\t\t// String - Tooltip label font colour\n\t\t\ttooltipFontColor: \"#fff\",\n\n\t\t\t// String - Tooltip title font declaration for the scale label\n\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip title font size in pixels\n\t\t\ttooltipTitleFontSize: 14,\n\n\t\t\t// String - Tooltip title font weight style\n\t\t\ttooltipTitleFontStyle: \"bold\",\n\n\t\t\t// String - Tooltip title font colour\n\t\t\ttooltipTitleFontColor: \"#fff\",\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipYPadding: 6,\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipXPadding: 6,\n\n\t\t\t// Number - Size of the caret on the tooltip\n\t\t\ttooltipCaretSize: 8,\n\n\t\t\t// Number - Pixel radius of the tooltip border\n\t\t\ttooltipCornerRadius: 6,\n\n\t\t\t// Number - Pixel offset from point x to tooltip edge\n\t\t\ttooltipXOffset: 10,\n\n\t\t\t// String - Template string for single tooltips\n\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\n\n\t\t\t// String - Template string for single tooltips\n\t\t\tmultiTooltipTemplate: \"<%= value %>\",\n\n\t\t\t// String - Colour behind the legend colour block\n\t\t\tmultiTooltipKeyBackground: '#fff',\n\n\t\t\t// Function - Will fire on animation progression.\n\t\t\tonAnimationProgress: function(){},\n\n\t\t\t// Function - Will fire on animation completion.\n\t\t\tonAnimationComplete: function(){}\n\n\t\t}\n\t};\n\n\t//Create a dictionary of chart types, to allow for extension of existing types\n\tChart.types = {};\n\n\t//Global Chart helpers object for utility methods and classes\n\tvar helpers = Chart.helpers = {};\n\n\t\t//-- Basic js utility methods\n\tvar each = helpers.each = function(loopable,callback,self){\n\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);\n\t\t\t// Check to see if null or undefined firstly.\n\t\t\tif (loopable){\n\t\t\t\tif (loopable.length === +loopable.length){\n\t\t\t\t\tvar i;\n\t\t\t\t\tfor (i=0; i<loopable.length; i++){\n\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor (var item in loopable){\n\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclone = helpers.clone = function(obj){\n\t\t\tvar objClone = {};\n\t\t\teach(obj,function(value,key){\n\t\t\t\tif (obj.hasOwnProperty(key)) objClone[key] = value;\n\t\t\t});\n\t\t\treturn objClone;\n\t\t},\n\t\textend = helpers.extend = function(base){\n\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {\n\t\t\t\teach(extensionObject,function(value,key){\n\t\t\t\t\tif (extensionObject.hasOwnProperty(key)) base[key] = value;\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn base;\n\t\t},\n\t\tmerge = helpers.merge = function(base,master){\n\t\t\t//Merge properties in left object over to a shallow clone of object right.\n\t\t\tvar args = Array.prototype.slice.call(arguments,0);\n\t\t\targs.unshift({});\n\t\t\treturn extend.apply(null, args);\n\t\t},\n\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){\n\t\t\tif (Array.prototype.indexOf) {\n\t\t\t\treturn arrayToSearch.indexOf(item);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {\n\t\t\t\t\tif (arrayToSearch[i] === item) return i;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t},\n\t\twhere = helpers.where = function(collection, filterCallback){\n\t\t\tvar filtered = [];\n\n\t\t\thelpers.each(collection, function(item){\n\t\t\t\tif (filterCallback(item)){\n\t\t\t\t\tfiltered.push(item);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn filtered;\n\t\t},\n\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to start of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to end of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = arrayToSearch.length;\n\t\t\t}\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tinherits = helpers.inherits = function(extensions){\n\t\t\t//Basic javascript inheritance based on the model created in Backbone.js\n\t\t\tvar parent = this;\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\n\n\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};\n\t\t\tSurrogate.prototype = parent.prototype;\n\t\t\tChartElement.prototype = new Surrogate();\n\n\t\t\tChartElement.extend = inherits;\n\n\t\t\tif (extensions) extend(ChartElement.prototype, extensions);\n\n\t\t\tChartElement.__super__ = parent.prototype;\n\n\t\t\treturn ChartElement;\n\t\t},\n\t\tnoop = helpers.noop = function(){},\n\t\tuid = helpers.uid = (function(){\n\t\t\tvar id=0;\n\t\t\treturn function(){\n\t\t\t\treturn \"chart-\" + id++;\n\t\t\t};\n\t\t})(),\n\t\twarn = helpers.warn = function(str){\n\t\t\t//Method for warning of errors\n\t\t\tif (window.console && typeof window.console.warn == \"function\") console.warn(str);\n\t\t},\n\t\tamd = helpers.amd = (typeof define == 'function' && define.amd),\n\t\t//-- Math methods\n\t\tisNumber = helpers.isNumber = function(n){\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t\t},\n\t\tmax = helpers.max = function(array){\n\t\t\treturn Math.max.apply( Math, array );\n\t\t},\n\t\tmin = helpers.min = function(array){\n\t\t\treturn Math.min.apply( Math, array );\n\t\t},\n\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){\n\t\t\tif(isNumber(maxValue)) {\n\t\t\t\tif( valueToCap > maxValue ) {\n\t\t\t\t\treturn maxValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(isNumber(minValue)){\n\t\t\t\tif ( valueToCap < minValue ){\n\t\t\t\t\treturn minValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn valueToCap;\n\t\t},\n\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){\n\t\t\tif (num%1!==0 && isNumber(num)){\n\t\t\t\treturn num.toString().split(\".\")[1].length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\ttoRadians = helpers.radians = function(degrees){\n\t\t\treturn degrees * (Math.PI/180);\n\t\t},\n\t\t// Gets the angle from vertical upright to the point about a centre.\n\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\n\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle\n\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){\n\t\t\t\tangle += Math.PI*2;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tangle: angle,\n\t\t\t\tdistance: radialDistanceFromCenter\n\t\t\t};\n\t\t},\n\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t\t},\n\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){\n\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),\n\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),\n\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta\n\t\t\t\tfb=t*d12/(d01+d12);\n\t\t\treturn {\n\t\t\t\tinner : {\n\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t},\n\t\t\t\touter : {\n\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){\n\t\t\treturn Math.floor(Math.log(val) / Math.LN10);\n\t\t},\n\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\n\n\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base\n\t\t\tvar minSteps = 2,\n\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),\n\t\t\t\tskipFitting = (minSteps >= maxSteps);\n\n\t\t\tvar maxValue = max(valuesArray),\n\t\t\t\tminValue = min(valuesArray);\n\n\t\t\t// We need some degree of seperation here to calculate the scales if all the values are the same\n\t\t\t// Adding/minusing 0.5 will give us a range of 1.\n\t\t\tif (maxValue === minValue){\n\t\t\t\tmaxValue += 0.5;\n\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero\n\t\t\t\tif (minValue >= 0.5 && !startFromZero){\n\t\t\t\t\tminValue -= 0.5;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// Make up a whole number above the values\n\t\t\t\t\tmaxValue += 0.5;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),\n\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),\n\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphRange = graphMax - graphMin,\n\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);\n\n\t\t\t//If we have more space on the graph we'll use it to give more definition to the data\n\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {\n\t\t\t\tif(numberOfSteps > maxSteps){\n\t\t\t\t\tstepValue *=2;\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.\n\t\t\t\t\tif (numberOfSteps % 1 !== 0){\n\t\t\t\t\t\tskipFitting = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//We can fit in double the amount of scale points on the scale\n\t\t\t\telse{\n\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal\n\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){\n\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\n\t\t\t\t\t\tif(stepValue/2 % 1 === 0){\n\t\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//If it would make it a float break out of the loop\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.\n\t\t\t\t\telse{\n\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (skipFitting){\n\t\t\t\tnumberOfSteps = minSteps;\n\t\t\t\tstepValue = graphRange / numberOfSteps;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsteps : numberOfSteps,\n\t\t\t\tstepValue : stepValue,\n\t\t\t\tmin : graphMin,\n\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)\n\t\t\t};\n\n\t\t},\n\t\t/* jshint ignore:start */\n\t\t// Blows up jshint errors based on the new Function constructor\n\t\t//Templating methods\n\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\n\t\ttemplate = helpers.template = function(templateString, valuesObject){\n\n\t\t\t// If templateString is function rather than string-template - call the function for valuesObject\n\n\t\t\tif(templateString instanceof Function){\n\t\t\t \treturn templateString(valuesObject);\n\t\t \t}\n\n\t\t\tvar cache = {};\n\t\t\tfunction tmpl(str, data){\n\t\t\t\t// Figure out if we're getting a template, or if we need to\n\t\t\t\t// load the template - and be sure to cache the result.\n\t\t\t\tvar fn = !/\\W/.test(str) ?\n\t\t\t\tcache[str] = cache[str] :\n\n\t\t\t\t// Generate a reusable function that will serve as a template\n\t\t\t\t// generator (and which will be cached).\n\t\t\t\tnew Function(\"obj\",\n\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\n\t\t\t\t\t// Introduce the data as local variables using with(){}\n\t\t\t\t\t\"with(obj){p.push('\" +\n\n\t\t\t\t\t// Convert the template into pure JavaScript\n\t\t\t\t\tstr\n\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")\n\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")\n\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")\n\t\t\t\t\t\t.split(\"\\t\").join(\"');\")\n\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")\n\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +\n\t\t\t\t\t\"');}return p.join('');\"\n\t\t\t\t);\n\n\t\t\t\t// Provide some basic currying to the user\n\t\t\t\treturn data ? fn( data ) : fn;\n\t\t\t}\n\t\t\treturn tmpl(templateString,valuesObject);\n\t\t},\n\t\t/* jshint ignore:end */\n\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){\n\t\t\tvar labelsArray = new Array(numberOfSteps);\n\t\t\tif (labelTemplateString){\n\t\t\t\teach(labelsArray,function(val,index){\n\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn labelsArray;\n\t\t},\n\t\t//--Animation methods\n\t\t//Easing functions adapted from Robert Penner's easing equations\n\t\t//http://www.robertpenner.com/easing/\n\t\teasingEffects = helpers.easingEffects = {\n\t\t\tlinear: function (t) {\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\teaseInQuad: function (t) {\n\t\t\t\treturn t * t;\n\t\t\t},\n\t\t\teaseOutQuad: function (t) {\n\t\t\t\treturn -1 * t * (t - 2);\n\t\t\t},\n\t\t\teaseInOutQuad: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t;\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t\t},\n\t\t\teaseInCubic: function (t) {\n\t\t\t\treturn t * t * t;\n\t\t\t},\n\t\t\teaseOutCubic: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutCubic: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t\t},\n\t\t\teaseInQuart: function (t) {\n\t\t\t\treturn t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuart: function (t) {\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t\t},\n\t\t\teaseInOutQuart: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t\t},\n\t\t\teaseInQuint: function (t) {\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuint: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutQuint: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t\t},\n\t\t\teaseInSine: function (t) {\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t\t},\n\t\t\teaseOutSine: function (t) {\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t\t},\n\t\t\teaseInOutSine: function (t) {\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t\t},\n\t\t\teaseInExpo: function (t) {\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t\t},\n\t\t\teaseOutExpo: function (t) {\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t\t},\n\t\t\teaseInOutExpo: function (t) {\n\t\t\t\tif (t === 0) return 0;\n\t\t\t\tif (t === 1) return 1;\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t},\n\t\t\teaseInCirc: function (t) {\n\t\t\t\tif (t >= 1) return t;\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t\t},\n\t\t\teaseOutCirc: function (t) {\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t\t},\n\t\t\teaseInOutCirc: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t\t},\n\t\t\teaseInElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) return 0;\n\t\t\t\tif ((t /= 1) == 1) return 1;\n\t\t\t\tif (!p) p = 1 * 0.3;\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t},\n\t\t\teaseOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) return 0;\n\t\t\t\tif ((t /= 1) == 1) return 1;\n\t\t\t\tif (!p) p = 1 * 0.3;\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t\t},\n\t\t\teaseInOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) return 0;\n\t\t\t\tif ((t /= 1 / 2) == 2) return 1;\n\t\t\t\tif (!p) p = 1 * (0.3 * 1.5);\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\tif (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t\t},\n\t\t\teaseInBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t\t},\n\t\t\teaseOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t\t},\n\t\t\teaseInOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t\t},\n\t\t\teaseInBounce: function (t) {\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t\t},\n\t\t\teaseOutBounce: function (t) {\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t\t} else {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t\t\t}\n\t\t\t},\n\t\t\teaseInOutBounce: function (t) {\n\t\t\t\tif (t < 1 / 2) return easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t\t}\n\t\t},\n\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){\n\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){\n\t\t\treturn window.cancelAnimationFrame ||\n\t\t\t\twindow.webkitCancelAnimationFrame ||\n\t\t\t\twindow.mozCancelAnimationFrame ||\n\t\t\t\twindow.oCancelAnimationFrame ||\n\t\t\t\twindow.msCancelAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\n\n\t\t\tvar currentStep = 0,\n\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;\n\n\t\t\tvar animationFrame = function(){\n\t\t\t\tcurrentStep++;\n\t\t\t\tvar stepDecimal = currentStep/totalSteps;\n\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\n\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);\n\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);\n\t\t\t\tif (currentStep < totalSteps){\n\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);\n\t\t\t\t} else{\n\t\t\t\t\tonComplete.apply(chartInstance);\n\t\t\t\t}\n\t\t\t};\n\t\t\trequestAnimFrame(animationFrame);\n\t\t},\n\t\t//-- DOM methods\n\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){\n\t\t\tvar mouseX, mouseY;\n\t\t\tvar e = evt.originalEvent || evt,\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();\n\n\t\t\tif (e.touches){\n\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;\n\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmouseX = e.clientX - boundingRect.left;\n\t\t\t\tmouseY = e.clientY - boundingRect.top;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx : mouseX,\n\t\t\t\ty : mouseY\n\t\t\t};\n\n\t\t},\n\t\taddEvent = helpers.addEvent = function(node,eventType,method){\n\t\t\tif (node.addEventListener){\n\t\t\t\tnode.addEventListener(eventType,method);\n\t\t\t} else if (node.attachEvent){\n\t\t\t\tnode.attachEvent(\"on\"+eventType, method);\n\t\t\t} else {\n\t\t\t\tnode[\"on\"+eventType] = method;\n\t\t\t}\n\t\t},\n\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){\n\t\t\tif (node.removeEventListener){\n\t\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t\t} else if (node.detachEvent){\n\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);\n\t\t\t} else{\n\t\t\t\tnode[\"on\" + eventType] = noop;\n\t\t\t}\n\t\t},\n\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){\n\t\t\t// Create the events object if it's not already present\n\t\t\tif (!chartInstance.events) chartInstance.events = {};\n\n\t\t\teach(arrayOfEvents,function(eventName){\n\t\t\t\tchartInstance.events[eventName] = function(){\n\t\t\t\t\thandler.apply(chartInstance, arguments);\n\t\t\t\t};\n\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);\n\t\t\t});\n\t\t},\n\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {\n\t\t\teach(arrayOfEvents, function(handler,eventName){\n\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);\n\t\t\t});\n\t\t},\n\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){\n\t\t\tvar container = domNode.parentNode;\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container.clientWidth;\n\t\t},\n\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){\n\t\t\tvar container = domNode.parentNode;\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container.clientHeight;\n\t\t},\n\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support\n\t\tretinaScale = helpers.retinaScale = function(chart){\n\t\t\tvar ctx = chart.ctx,\n\t\t\t\twidth = chart.canvas.width,\n\t\t\t\theight = chart.canvas.height;\n\n\t\t\tif (window.devicePixelRatio) {\n\t\t\t\tctx.canvas.style.width = width + \"px\";\n\t\t\t\tctx.canvas.style.height = height + \"px\";\n\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;\n\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;\n\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t\t\t}\n\t\t},\n\t\t//-- Canvas methods\n\t\tclear = helpers.clear = function(chart){\n\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);\n\t\t},\n\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){\n\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;\n\t\t},\n\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){\n\t\t\tctx.font = font;\n\t\t\tvar longest = 0;\n\t\t\teach(arrayOfStrings,function(string){\n\t\t\t\tvar textWidth = ctx.measureText(string).width;\n\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;\n\t\t\t});\n\t\t\treturn longest;\n\t\t},\n\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x + radius, y);\n\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\tctx.lineTo(x, y + radius);\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t\tctx.closePath();\n\t\t};\n\n\n\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t//Destroy method on the chart will remove the instance of the chart from this reference.\n\tChart.instances = {};\n\n\tChart.Type = function(data,options,chart){\n\t\tthis.options = options;\n\t\tthis.chart = chart;\n\t\tthis.id = uid();\n\t\t//Add the chart instance to the global namespace\n\t\tChart.instances[this.id] = this;\n\n\t\t// Initialize is always called when a chart type is created\n\t\t// By default it is a no op, but it should be extended\n\t\tif (options.responsive){\n\t\t\tthis.resize();\n\t\t}\n\t\tthis.initialize.call(this,data);\n\t};\n\n\t//Core methods that'll be a part of every chart type\n\textend(Chart.Type.prototype,{\n\t\tinitialize : function(){return this;},\n\t\tclear : function(){\n\t\t\tclear(this.chart);\n\t\t\treturn this;\n\t\t},\n\t\tstop : function(){\n\t\t\t// Stops any current animation loop occuring\n\t\t\tcancelAnimFrame(this.animationFrame);\n\t\t\treturn this;\n\t\t},\n\t\tresize : function(callback){\n\t\t\tthis.stop();\n\t\t\tvar canvas = this.chart.canvas,\n\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),\n\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\n\n\t\t\tcanvas.width = this.chart.width = newWidth;\n\t\t\tcanvas.height = this.chart.height = newHeight;\n\n\t\t\tretinaScale(this.chart);\n\n\t\t\tif (typeof callback === \"function\"){\n\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\treflow : noop,\n\t\trender : function(reflow){\n\t\t\tif (reflow){\n\t\t\t\tthis.reflow();\n\t\t\t}\n\t\t\tif (this.options.animation && !reflow){\n\t\t\t\thelpers.animationLoop(\n\t\t\t\t\tthis.draw,\n\t\t\t\t\tthis.options.animationSteps,\n\t\t\t\t\tthis.options.animationEasing,\n\t\t\t\t\tthis.options.onAnimationProgress,\n\t\t\t\t\tthis.options.onAnimationComplete,\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.draw();\n\t\t\t\tthis.options.onAnimationComplete.call(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tgenerateLegend : function(){\n\t\t\treturn template(this.options.legendTemplate,this);\n\t\t},\n\t\tdestroy : function(){\n\t\t\tthis.clear();\n\t\t\tunbindEvents(this, this.events);\n\t\t\tvar canvas = this.chart.canvas;\n\n\t\t\t// Reset canvas height/width attributes starts a fresh with the canvas context\n\t\t\tcanvas.width = this.chart.width;\n\t\t\tcanvas.height = this.chart.height;\n\n\t\t\t// < IE9 doesn't support removeProperty\n\t\t\tif (canvas.style.removeProperty) {\n\t\t\t\tcanvas.style.removeProperty('width');\n\t\t\t\tcanvas.style.removeProperty('height');\n\t\t\t} else {\n\t\t\t\tcanvas.style.removeAttribute('width');\n\t\t\t\tcanvas.style.removeAttribute('height');\n\t\t\t}\n\n\t\t\tdelete Chart.instances[this.id];\n\t\t},\n\t\tshowTooltip : function(ChartElements, forceRedraw){\n\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.\n\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];\n\n\t\t\tvar isChanged = (function(Elements){\n\t\t\t\tvar changed = false;\n\n\t\t\t\tif (Elements.length !== this.activeElements.length){\n\t\t\t\t\tchanged = true;\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\n\t\t\t\teach(Elements, function(element, index){\n\t\t\t\t\tif (element !== this.activeElements[index]){\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t\treturn changed;\n\t\t\t}).call(this, ChartElements);\n\n\t\t\tif (!isChanged && !forceRedraw){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.activeElements = ChartElements;\n\t\t\t}\n\t\t\tthis.draw();\n\t\t\tif(this.options.customTooltips){\n\t\t\t\tthis.options.customTooltips(false);\n\t\t\t}\n\t\t\tif (ChartElements.length > 0){\n\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index\n\t\t\t\tif (this.datasets && this.datasets.length > 1) {\n\t\t\t\t\tvar dataArray,\n\t\t\t\t\t\tdataIndex;\n\n\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;\n\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);\n\t\t\t\t\t\tif (dataIndex !== -1){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar tooltipLabels = [],\n\t\t\t\t\t\ttooltipColors = [],\n\t\t\t\t\t\tmedianPosition = (function(index) {\n\n\t\t\t\t\t\t\t// Get all the points at that particular index\n\t\t\t\t\t\t\tvar Elements = [],\n\t\t\t\t\t\t\t\tdataCollection,\n\t\t\t\t\t\t\t\txPositions = [],\n\t\t\t\t\t\t\t\tyPositions = [],\n\t\t\t\t\t\t\t\txMax,\n\t\t\t\t\t\t\t\tyMax,\n\t\t\t\t\t\t\t\txMin,\n\t\t\t\t\t\t\t\tyMin;\n\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;\n\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){\n\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\thelpers.each(Elements, function(element) {\n\t\t\t\t\t\t\t\txPositions.push(element.x);\n\t\t\t\t\t\t\t\tyPositions.push(element.y);\n\n\n\t\t\t\t\t\t\t\t//Include any colour information about the element\n\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));\n\t\t\t\t\t\t\t\ttooltipColors.push({\n\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,\n\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}, this);\n\n\t\t\t\t\t\t\tyMin = min(yPositions);\n\t\t\t\t\t\t\tyMax = max(yPositions);\n\n\t\t\t\t\t\t\txMin = min(xPositions);\n\t\t\t\t\t\t\txMax = max(xPositions);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,\n\t\t\t\t\t\t\t\ty: (yMin + yMax)/2\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}).call(this, dataIndex);\n\n\t\t\t\t\tnew Chart.MultiTooltip({\n\t\t\t\t\t\tx: medianPosition.x,\n\t\t\t\t\t\ty: medianPosition.y,\n\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\txOffset: this.options.tooltipXOffset,\n\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,\n\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,\n\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,\n\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,\n\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\tlabels: tooltipLabels,\n\t\t\t\t\t\tlegendColors: tooltipColors,\n\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,\n\t\t\t\t\t\ttitle: ChartElements[0].label,\n\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\tctx: this.chart.ctx,\n\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t}).draw();\n\n\t\t\t\t} else {\n\t\t\t\t\teach(ChartElements, function(Element) {\n\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();\n\t\t\t\t\t\tnew Chart.Tooltip({\n\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),\n\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),\n\t\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t\t}).draw();\n\t\t\t\t\t}, this);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\ttoBase64Image : function(){\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t}\n\t});\n\n\tChart.Type.extend = function(extensions){\n\n\t\tvar parent = this;\n\n\t\tvar ChartType = function(){\n\t\t\treturn parent.apply(this,arguments);\n\t\t};\n\n\t\t//Copy the prototype object of the this class\n\t\tChartType.prototype = clone(parent.prototype);\n\t\t//Now overwrite some of the properties in the base class with the new extensions\n\t\textend(ChartType.prototype, extensions);\n\n\t\tChartType.extend = Chart.Type.extend;\n\n\t\tif (extensions.name || parent.prototype.name){\n\n\t\t\tvar chartName = extensions.name || parent.prototype.name;\n\t\t\t//Assign any potential default values of the new chart type\n\n\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.\n\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart\n\t\t\t//doesn't define some defaults of their own.\n\n\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};\n\n\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);\n\n\t\t\tChart.types[chartName] = ChartType;\n\n\t\t\t//Register this new chart type in the Chart prototype\n\t\t\tChart.prototype[chartName] = function(data,options){\n\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});\n\t\t\t\treturn new ChartType(data,config,this);\n\t\t\t};\n\t\t} else{\n\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");\n\t\t}\n\t\treturn parent;\n\t};\n\n\tChart.Element = function(configuration){\n\t\textend(this,configuration);\n\t\tthis.initialize.apply(this,arguments);\n\t\tthis.save();\n\t};\n\textend(Chart.Element.prototype,{\n\t\tinitialize : function(){},\n\t\trestore : function(props){\n\t\t\tif (!props){\n\t\t\t\textend(this,this._saved);\n\t\t\t} else {\n\t\t\t\teach(props,function(key){\n\t\t\t\t\tthis[key] = this._saved[key];\n\t\t\t\t},this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tsave : function(){\n\t\t\tthis._saved = clone(this);\n\t\t\tdelete this._saved._saved;\n\t\t\treturn this;\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\teach(newProps,function(value,key){\n\t\t\t\tthis._saved[key] = this[key];\n\t\t\t\tthis[key] = value;\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttransition : function(props,ease){\n\t\t\teach(props,function(value,key){\n\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\treturn {\n\t\t\t\tx : this.x,\n\t\t\t\ty : this.y\n\t\t\t};\n\t\t},\n\t\thasValue: function(){\n\t\t\treturn isNumber(this.value);\n\t\t}\n\t});\n\n\tChart.Element.extend = inherits;\n\n\n\tChart.Point = Chart.Element.extend({\n\t\tdisplay: true,\n\t\tinRange: function(chartX,chartY){\n\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;\n\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));\n\t\t},\n\t\tdraw : function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\n\t\t\t//Quick debug for bezier curve splining\n\t\t\t//Highlights control points and the line between them.\n\t\t\t//Handy for dev - stripped in the min version.\n\n\t\t\t// ctx.save();\n\t\t\t// ctx.fillStyle = \"black\";\n\t\t\t// ctx.strokeStyle = \"black\"\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);\n\t\t\t// ctx.lineTo(this.x, this.y);\n\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);\n\t\t\t// ctx.stroke();\n\n\t\t\t// ctx.restore();\n\n\n\n\t\t}\n\t});\n\n\tChart.Arc = Chart.Element.extend({\n\t\tinRange : function(chartX,chartY){\n\n\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {\n\t\t\t\tx: chartX,\n\t\t\t\ty: chartY\n\t\t\t});\n\n\t\t\t//Check if within the range of the open/close angle\n\t\t\tvar betweenAngles = (pointRelativePosition.angle >= this.startAngle && pointRelativePosition.angle <= this.endAngle),\n\t\t\t\twithinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t//Ensure within the outside of the arc centre, but inside arc outer\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),\n\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;\n\t\t\treturn {\n\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t};\n\t\t},\n\t\tdraw : function(animationPercent){\n\n\t\t\tvar easingDecimal = animationPercent || 1;\n\n\t\t\tvar ctx = this.ctx;\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle);\n\n\t\t\tctx.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, true);\n\n\t\t\tctx.closePath();\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\tctx.fill();\n\t\t\tctx.lineJoin = 'bevel';\n\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Rectangle = Chart.Element.extend({\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\thalfWidth = this.width/2,\n\t\t\t\tleftX = this.x - halfWidth,\n\t\t\t\trightX = this.x + halfWidth,\n\t\t\t\ttop = this.base - (this.base - this.y),\n\t\t\t\thalfStroke = this.strokeWidth / 2;\n\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\tif (this.showStroke){\n\t\t\t\tleftX += halfStroke;\n\t\t\t\trightX -= halfStroke;\n\t\t\t\ttop += halfStroke;\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.fillStyle = this.fillColor;\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t// It'd be nice to keep this class totally generic to any rectangle\n\t\t\t// and simply specify which border to miss out.\n\t\t\tctx.moveTo(leftX, this.base);\n\t\t\tctx.lineTo(leftX, top);\n\t\t\tctx.lineTo(rightX, top);\n\t\t\tctx.lineTo(rightX, this.base);\n\t\t\tctx.fill();\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\theight : function(){\n\t\t\treturn this.base - this.y;\n\t\t},\n\t\tinRange : function(chartX,chartY){\n\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\n\t\t}\n\t});\n\n\tChart.Tooltip = Chart.Element.extend({\n\t\tdraw : function(){\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.xAlign = \"center\";\n\t\t\tthis.yAlign = \"above\";\n\n\t\t\t//Distance between the actual element.y position and the start of the tooltip caret\n\t\t\tvar caretPadding = this.caretPadding = 2;\n\n\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,\n\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,\n\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;\n\n\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){\n\t\t\t\tthis.xAlign = \"left\";\n\t\t\t} else if (this.x - tooltipWidth/2 < 0){\n\t\t\t\tthis.xAlign = \"right\";\n\t\t\t}\n\n\t\t\tif (this.y - tooltipHeight < 0){\n\t\t\t\tthis.yAlign = \"below\";\n\t\t\t}\n\n\n\t\t\tvar tooltipX = this.x - tooltipWidth/2,\n\t\t\t\ttooltipY = this.y - tooltipHeight;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tswitch(this.yAlign)\n\t\t\t\t{\n\t\t\t\tcase \"above\":\n\t\t\t\t\t//Draw a caret above the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"below\":\n\t\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;\n\t\t\t\t\t//Draw a caret below the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tswitch(this.xAlign)\n\t\t\t\t{\n\t\t\t\tcase \"left\":\n\t\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);\n\n\t\t\t\tctx.fill();\n\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.MultiTooltip = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);\n\n\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleFontSize *1.5;\n\n\t\t\tthis.ctx.font = this.titleFont;\n\n\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,\n\t\t\t\t//Label has a legend square as well so account for this.\n\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,\n\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);\n\n\t\t\tthis.width = longestTextWidth + (this.xPadding*2);\n\n\n\t\t\tvar halfHeight = this.height/2;\n\n\t\t\t//Check to ensure the height will fit on the canvas\n\t\t\tif (this.y - halfHeight < 0 ){\n\t\t\t\tthis.y = halfHeight;\n\t\t\t} else if (this.y + halfHeight > this.chart.height){\n\t\t\t\tthis.y = this.chart.height - halfHeight;\n\t\t\t}\n\n\t\t\t//Decide whether to align left or right based on position on canvas\n\t\t\tif (this.x > this.chart.width/2){\n\t\t\t\tthis.x -= this.xOffset + this.width;\n\t\t\t} else {\n\t\t\t\tthis.x += this.xOffset;\n\t\t\t}\n\n\n\t\t},\n\t\tgetLineHeight : function(index){\n\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,\n\t\t\t\tafterTitleIndex = index-1;\n\n\t\t\t//If the index is zero, we're getting the title\n\t\t\tif (index === 0){\n\t\t\t\treturn baseLineHeight + this.titleFontSize/2;\n\t\t\t} else{\n\t\t\t\treturn baseLineHeight + ((this.fontSize*1.5*afterTitleIndex) + this.fontSize/2) + this.titleFontSize * 1.5;\n\t\t\t}\n\n\t\t},\n\t\tdraw : function(){\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\t\t\tctx.fill();\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.textAlign = \"left\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillStyle = this.titleTextColor;\n\t\t\t\tctx.font = this.titleFont;\n\n\t\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));\n\n\t\t\t\tctx.font = this.font;\n\t\t\t\thelpers.each(this.labels,function(label,index){\n\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));\n\n\t\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)\n\t\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.\n\n\t\t\t\t\tctx.fillStyle = this.legendColorBackground;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\t\t\t\t\tctx.fillStyle = this.legendColors[index].fill;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\n\t\t\t\t},this);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Scale = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.fit();\n\t\t},\n\t\tbuildYLabels : function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) : 0;\n\t\t},\n\t\taddXLabel : function(label){\n\t\t\tthis.xLabels.push(label);\n\t\t\tthis.valuesCount++;\n\t\t\tthis.fit();\n\t\t},\n\t\tremoveXLabel : function(){\n\t\t\tthis.xLabels.shift();\n\t\t\tthis.valuesCount--;\n\t\t\tthis.fit();\n\t\t},\n\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use\n\t\tfit: function(){\n\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated\n\n\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation\n\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;\n\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels\n\n\t\t\t// Apply padding settings to the start and end point.\n\t\t\tthis.startPoint += this.padding;\n\t\t\tthis.endPoint -= this.padding;\n\n\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis\n\t\t\tvar cachedHeight = this.endPoint - this.startPoint,\n\t\t\t\tcachedYLabelWidth;\n\n\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start\n\t\t\t/*\n\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:\n\t\t\t *\n\t\t\t\tthis.steps;\n\t\t\t\tthis.stepValue;\n\t\t\t\tthis.min;\n\t\t\t\tthis.max;\n\t\t\t *\n\t\t\t */\n\t\t\tthis.calculateYRange(cachedHeight);\n\n\t\t\t// With these properties set we can now build the array of yLabels\n\t\t\t// and also the width of the largest yLabel\n\t\t\tthis.buildYLabels();\n\n\t\t\tthis.calculateXLabelRotation();\n\n\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){\n\t\t\t\tcachedHeight = this.endPoint - this.startPoint;\n\t\t\t\tcachedYLabelWidth = this.yLabelWidth;\n\n\t\t\t\tthis.calculateYRange(cachedHeight);\n\t\t\t\tthis.buildYLabels();\n\n\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed\n\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){\n\t\t\t\t\tthis.calculateXLabelRotation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tcalculateXLabelRotation : function(){\n\t\t\t//Get the width of each grid by calculating the difference\n\t\t\t//between x offsets between 0 and 1.\n\n\t\t\tthis.ctx.font = this.font;\n\n\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,\n\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,\n\t\t\t\tfirstRotated,\n\t\t\t\tlastRotated;\n\n\n\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;\n\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth + 10) ? firstWidth/2 : this.yLabelWidth + 10;\n\n\t\t\tthis.xLabelRotation = 0;\n\t\t\tif (this.display){\n\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),\n\t\t\t\t\tcosRotation,\n\t\t\t\t\tfirstRotatedWidth;\n\t\t\t\tthis.xLabelWidth = originalLabelWidth;\n\t\t\t\t//Allow 3 pixels x2 padding either side for label readability\n\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;\n\n\t\t\t\t//Max label rotate should be 90 - also act as a loop counter\n\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\n\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));\n\n\t\t\t\t\tfirstRotated = cosRotation * firstWidth;\n\t\t\t\t\tlastRotated = cosRotation * lastWidth;\n\n\t\t\t\t\t// We're right aligning the text now.\n\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth + 8){\n\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;\n\n\n\t\t\t\t\tthis.xLabelRotation++;\n\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;\n\n\t\t\t\t}\n\t\t\t\tif (this.xLabelRotation > 0){\n\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.xLabelWidth = 0;\n\t\t\t\tthis.xScalePaddingRight = this.padding;\n\t\t\t\tthis.xScalePaddingLeft = this.padding;\n\t\t\t}\n\n\t\t},\n\t\t// Needs to be overidden in each Chart type\n\t\t// Otherwise we need to pass all the data into the scale class\n\t\tcalculateYRange: noop,\n\t\tdrawingArea: function(){\n\t\t\treturn this.startPoint - this.endPoint;\n\t\t},\n\t\tcalculateY : function(value){\n\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);\n\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));\n\t\t},\n\t\tcalculateX : function(index){\n\t\t\tvar isRotated = (this.xLabelRotation > 0),\n\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\n\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),\n\t\t\t\tvalueWidth = innerWidth/Math.max((this.valuesCount - ((this.offsetGridLines) ? 0 : 1)), 1),\n\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;\n\n\t\t\tif (this.offsetGridLines){\n\t\t\t\tvalueOffset += (valueWidth/2);\n\t\t\t}\n\n\t\t\treturn Math.round(valueOffset);\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\thelpers.extend(this, newProps);\n\t\t\tthis.fit();\n\t\t},\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,\n\t\t\t\txStart = Math.round(this.xScalePaddingLeft);\n\t\t\tif (this.display){\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.font = this.font;\n\t\t\t\teach(this.yLabels,function(labelString,index){\n\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),\n\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter),\n\t\t\t\t\t\tdrawHorizontalLine = this.showHorizontalLines;\n\n\t\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tif (this.showLabels){\n\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);\n\t\t\t\t\t}\n\n\t\t\t\t\t// This is X axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawHorizontalLine){\n\t\t\t\t\t\tdrawHorizontalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawHorizontalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);\n\n\t\t\t\t\tif(drawHorizontalLine){\n\t\t\t\t\t\tctx.moveTo(xStart, linePositionY);\n\t\t\t\t\t\tctx.lineTo(this.width, linePositionY);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);\n\t\t\t\t\tctx.lineTo(xStart, linePositionY);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t},this);\n\n\t\t\t\teach(this.xLabels,function(label,index){\n\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line\n\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0),\n\t\t\t\t\t\tdrawVerticalLine = this.showVerticalLines;\n\n\t\t\t\t\t// This is Y axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawVerticalLine){\n\t\t\t\t\t\tdrawVerticalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\n\n\t\t\t\t\t// Small lines at the bottom of the base grid line\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);\n\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);\n\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";\n\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";\n\t\t\t\t\tctx.fillText(label, 0, 0);\n\t\t\t\t\tctx.restore();\n\t\t\t\t},this);\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\tChart.RadialScale = Chart.Element.extend({\n\t\tinitialize: function(){\n\t\t\tthis.size = min([this.height, this.width]);\n\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t},\n\t\tcalculateCenterOffset: function(value){\n\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);\n\n\t\t\treturn (value - this.min) * scalingFactor;\n\t\t},\n\t\tupdate : function(){\n\t\t\tif (!this.lineArc){\n\t\t\t\tthis.setScaleSize();\n\t\t\t} else {\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t\t}\n\t\t\tthis.buildYLabels();\n\t\t},\n\t\tbuildYLabels: function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t},\n\t\tgetCircumference : function(){\n\t\t\treturn ((Math.PI*2) / this.valuesCount);\n\t\t},\n\t\tsetScaleSize: function(){\n\t\t\t/*\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t *\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t *\n\t\t\t * Solution:\n\t\t\t *\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t * at each index we check if the text overlaps.\n\t\t\t *\n\t\t\t * Where it does, we store that angle and that index.\n\t\t\t *\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t *\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t * along with labels.\n\t\t\t *\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t *\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t * and position it in the most space efficient manner\n\t\t\t *\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t */\n\n\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),\n\t\t\t\tpointPosition,\n\t\t\t\ti,\n\t\t\t\ttextWidth,\n\t\t\t\thalfTextWidth,\n\t\t\t\tfurthestRight = this.width,\n\t\t\t\tfurthestRightIndex,\n\t\t\t\tfurthestRightAngle,\n\t\t\t\tfurthestLeft = 0,\n\t\t\t\tfurthestLeftIndex,\n\t\t\t\tfurthestLeftAngle,\n\t\t\t\txProtrusionLeft,\n\t\t\t\txProtrusionRight,\n\t\t\t\tradiusReductionRight,\n\t\t\t\tradiusReductionLeft,\n\t\t\t\tmaxWidthRadius;\n\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\tfor (i=0;i<this.valuesCount;i++){\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\n\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;\n\t\t\t\tif (i === 0 || i === this.valuesCount/2){\n\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\n\t\t\t\t\t// w/left and right text sizes\n\t\t\t\t\thalfTextWidth = textWidth/2;\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i < this.valuesCount/2) {\n\t\t\t\t\t// Less than half the values means we'll left align the text\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i > this.valuesCount/2){\n\t\t\t\t\t// More than half the values means we'll right align the text\n\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txProtrusionLeft = furthestLeft;\n\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\n\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\n\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\n\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);\n\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);\n\n\t\t\t// Ensure we actually need to reduce the size of the chart\n\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\n\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\n\n\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;\n\n\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\n\n\t\t},\n\t\tsetCenterPoint: function(leftMovement, rightMovement){\n\n\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,\n\t\t\t\tmaxLeft = leftMovement + this.drawingArea;\n\n\t\t\tthis.xCenter = (maxLeft + maxRight)/2;\n\t\t\t// Always vertically in the centre as the text height doesn't change\n\t\t\tthis.yCenter = (this.height/2);\n\t\t},\n\n\t\tgetIndexAngle : function(index){\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\n\t\t\treturn index * angleMultiplier - (Math.PI/2);\n\t\t},\n\t\tgetPointPosition : function(index, distanceFromCenter){\n\t\t\tvar thisAngle = this.getIndexAngle(index);\n\t\t\treturn {\n\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,\n\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter\n\t\t\t};\n\t\t},\n\t\tdraw: function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\teach(this.yLabels, function(label, index){\n\t\t\t\t\t// Don't draw a centre value\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),\n\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,\n\t\t\t\t\t\t\tpointPosition;\n\n\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\tif (this.lineWidth > 0){\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\n\t\t\t\t\t\t\tif(this.lineArc){\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));\n\t\t\t\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.showLabels){\n\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\t\t\t\t\t\tif (this.showLabelBackdrop){\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;\n\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,\n\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,\n\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,\n\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;\n\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\n\t\t\t\tif (!this.lineArc){\n\t\t\t\t\tctx.lineWidth = this.angleLineWidth;\n\t\t\t\t\tctx.strokeStyle = this.angleLineColor;\n\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (this.angleLineWidth > 0){\n\t\t\t\t\t\t\tvar outerPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max));\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);\n\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;\n\n\t\t\t\t\t\tvar labelsCount = this.labels.length,\n\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,\n\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,\n\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),\n\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);\n\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if(i === halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if (i < halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\n\t\t\t\t\t\tif (exactQuarter){\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t} else if (upperHalf){\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Attach global event to resize each chart instance when the browser resizes\n\thelpers.addEvent(window, \"resize\", (function(){\n\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.\n\t\tvar timeout;\n\t\treturn function(){\n\t\t\tclearTimeout(timeout);\n\t\t\ttimeout = setTimeout(function(){\n\t\t\t\teach(Chart.instances,function(instance){\n\t\t\t\t\t// If the responsive flag is set in the chart instance config\n\t\t\t\t\t// Cascade the resize event down to the chart.\n\t\t\t\t\tif (instance.options.responsive){\n\t\t\t\t\t\tinstance.resize(instance.render, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 50);\n\t\t};\n\t})());\n\n\n\tif (amd) {\n\t\tdefine(function(){\n\t\t\treturn Chart;\n\t\t});\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = Chart;\n\t}\n\n\troot.Chart = Chart;\n\n\tChart.noConflict = function(){\n\t\troot.Chart = previous;\n\t\treturn Chart;\n\t};\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\n\tvar defaultConfig = {\n\t\t//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\tscaleBeginAtZero : true,\n\n\t\t//Boolean - Whether grid lines are shown across the chart\n\t\tscaleShowGridLines : true,\n\n\t\t//String - Colour of the grid lines\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n\t\t//Number - Width of the grid lines\n\t\tscaleGridLineWidth : 1,\n\n\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\tscaleShowHorizontalLines: true,\n\n\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\tscaleShowVerticalLines: true,\n\n\t\t//Boolean - If there is a stroke on each bar\n\t\tbarShowStroke : true,\n\n\t\t//Number - Pixel width of the bar stroke\n\t\tbarStrokeWidth : 2,\n\n\t\t//Number - Spacing between each of the X value sets\n\t\tbarValueSpacing : 5,\n\n\t\t//Number - Spacing between data sets within X values\n\t\tbarDatasetSpacing : 1,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].fillColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n\n\t};\n\n\n\tChart.Type.extend({\n\t\tname: \"Bar\",\n\t\tdefaults : defaultConfig,\n\t\tinitialize:  function(data){\n\n\t\t\t//Expose options as a scope variable here so we can access it in the ScaleClass\n\t\t\tvar options = this.options;\n\n\t\t\tthis.ScaleClass = Chart.Scale.extend({\n\t\t\t\toffsetGridLines : true,\n\t\t\t\tcalculateBarX : function(datasetCount, datasetIndex, barIndex){\n\t\t\t\t\t//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar\n\t\t\t\t\tvar xWidth = this.calculateBaseWidth(),\n\t\t\t\t\t\txAbsolute = this.calculateX(barIndex) - (xWidth/2),\n\t\t\t\t\t\tbarWidth = this.calculateBarWidth(datasetCount);\n\n\t\t\t\t\treturn xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;\n\t\t\t\t},\n\t\t\t\tcalculateBaseWidth : function(){\n\t\t\t\t\treturn (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);\n\t\t\t\t},\n\t\t\t\tcalculateBarWidth : function(datasetCount){\n\t\t\t\t\t//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset\n\t\t\t\t\tvar baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);\n\n\t\t\t\t\treturn (baseWidth / datasetCount);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];\n\n\t\t\t\t\tthis.eachBars(function(bar){\n\t\t\t\t\t\tbar.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeBars, function(activeBar){\n\t\t\t\t\t\tactiveBar.fillColor = activeBar.highlightFill;\n\t\t\t\t\t\tactiveBar.strokeColor = activeBar.highlightStroke;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeBars);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\tthis.BarClass = Chart.Rectangle.extend({\n\t\t\t\tstrokeWidth : this.options.barStrokeWidth,\n\t\t\t\tshowStroke : this.options.barShowStroke,\n\t\t\t\tctx : this.chart.ctx\n\t\t\t});\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset,datasetIndex){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tbars : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tdatasetObject.bars.push(new this.BarClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\t\thighlightFill : dataset.highlightFill || dataset.fillColor,\n\t\t\t\t\t\thighlightStroke : dataset.highlightStroke || dataset.strokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t},this);\n\n\t\t\tthis.buildScale(data.labels);\n\n\t\t\tthis.BarClass.prototype.base = this.scale.endPoint;\n\n\t\t\tthis.eachBars(function(bar, index, datasetIndex){\n\t\t\t\thelpers.extend(bar, {\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t});\n\t\t\t\tbar.save();\n\t\t\t}, this);\n\n\t\t\tthis.render();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.scale.update();\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t});\n\n\t\t\tthis.eachBars(function(bar){\n\t\t\t\tbar.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\t\teachBars : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset, datasetIndex){\n\t\t\t\thelpers.each(dataset.bars, callback, this, datasetIndex);\n\t\t\t},this);\n\t\t},\n\t\tgetBarsAtEvent : function(e){\n\t\t\tvar barsArray = [],\n\t\t\t\teventPosition = helpers.getRelativePosition(e),\n\t\t\t\tdatasetIterator = function(dataset){\n\t\t\t\t\tbarsArray.push(dataset.bars[barIndex]);\n\t\t\t\t},\n\t\t\t\tbarIndex;\n\n\t\t\tfor (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {\n\t\t\t\tfor (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {\n\t\t\t\t\tif (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){\n\t\t\t\t\t\thelpers.each(this.datasets, datasetIterator);\n\t\t\t\t\t\treturn barsArray;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn barsArray;\n\t\t},\n\t\tbuildScale : function(labels){\n\t\t\tvar self = this;\n\n\t\t\tvar dataTotal = function(){\n\t\t\t\tvar values = [];\n\t\t\t\tself.eachBars(function(bar){\n\t\t\t\t\tvalues.push(bar.value);\n\t\t\t\t});\n\t\t\t\treturn values;\n\t\t\t};\n\n\t\t\tvar scaleOptions = {\n\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\tvaluesCount : labels.length,\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\tcalculateYRange: function(currentHeight){\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t);\n\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t},\n\t\t\t\txLabels : labels,\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\tpadding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\tdisplay : this.options.showScale\n\t\t\t};\n\n\t\t\tif (this.options.scaleOverride){\n\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.scale = new this.ScaleClass(scaleOptions);\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\tthis.datasets[datasetIndex].bars.push(new this.BarClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),\n\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\tbase : this.scale.endPoint,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].strokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].fillColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.addXLabel(label);\n\t\t\t//Then re-render the chart.\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.removeXLabel();\n\t\t\t//Then re-render the chart.\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.bars.shift();\n\t\t\t},this);\n\t\t\tthis.update();\n\t\t},\n\t\treflow : function(){\n\t\t\thelpers.extend(this.BarClass.prototype,{\n\t\t\t\ty: this.scale.endPoint,\n\t\t\t\tbase : this.scale.endPoint\n\t\t\t});\n\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width\n\t\t\t});\n\t\t\tthis.scale.update(newScaleProps);\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tthis.clear();\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\tthis.scale.draw(easingDecimal);\n\n\t\t\t//Draw all the bars for each dataset\n\t\t\thelpers.each(this.datasets,function(dataset,datasetIndex){\n\t\t\t\thelpers.each(dataset.bars,function(bar,index){\n\t\t\t\t\tif (bar.hasValue()){\n\t\t\t\t\t\tbar.base = this.scale.endPoint;\n\t\t\t\t\t\t//Transition then draw\n\t\t\t\t\t\tbar.transition({\n\t\t\t\t\t\t\tx : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\t\t\ty : this.scale.calculateY(bar.value),\n\t\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length)\n\t\t\t\t\t\t}, easingDecimal).draw();\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\t\t\t},this);\n\t\t}\n\t});\n\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\t//Cache a local reference to Chart.helpers\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\t//Boolean - Whether we should show a stroke on each segment\n\t\tsegmentShowStroke : true,\n\n\t\t//String - The colour of each segment stroke\n\t\tsegmentStrokeColor : \"#fff\",\n\n\t\t//Number - The width of each segment stroke\n\t\tsegmentStrokeWidth : 2,\n\n\t\t//The percentage of the chart that we cut out of the middle.\n\t\tpercentageInnerCutout : 50,\n\n\t\t//Number - Amount of animation steps\n\t\tanimationSteps : 100,\n\n\t\t//String - Animation easing effect\n\t\tanimationEasing : \"easeOutBounce\",\n\n\t\t//Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate : true,\n\n\t\t//Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale : false,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\n\n\t};\n\n\n\tChart.Type.extend({\n\t\t//Passing in a name registers this chart in the Chart namespace\n\t\tname: \"Doughnut\",\n\t\t//Providing a defaults will also register the deafults in the chart namespace\n\t\tdefaults : defaultConfig,\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\tinitialize:  function(data){\n\n\t\t\t//Declare segments as a static property to prevent inheriting across the Chart type prototype\n\t\t\tthis.segments = [];\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\n\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.calculateTotal(data);\n\n\t\t\thelpers.each(data,function(datapoint, index){\n\t\t\t\tthis.addData(datapoint, index, true);\n\t\t\t},this);\n\n\t\t\tthis.render();\n\t\t},\n\t\tgetSegmentsAtEvent : function(e){\n\t\t\tvar segmentsArray = [];\n\n\t\t\tvar location = helpers.getRelativePosition(e);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t},this);\n\t\t\treturn segmentsArray;\n\t\t},\n\t\taddData : function(segment, atIndex, silent){\n\t\t\tvar index = atIndex || this.segments.length;\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\tvalue : segment.value,\n\t\t\t\touterRadius : (this.options.animateScale) ? 0 : this.outerRadius,\n\t\t\t\tinnerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,\n\t\t\t\tfillColor : segment.color,\n\t\t\t\thighlightColor : segment.highlight || segment.color,\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\tstartAngle : Math.PI * 1.5,\n\t\t\t\tcircumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),\n\t\t\t\tlabel : segment.label\n\t\t\t}));\n\t\t\tif (!silent){\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t},\n\t\tcalculateCircumference : function(value){\n\t\t\treturn (Math.PI*2)*(Math.abs(value) / this.total);\n\t\t},\n\t\tcalculateTotal : function(data){\n\t\t\tthis.total = 0;\n\t\t\thelpers.each(data,function(segment){\n\t\t\t\tthis.total += Math.abs(segment.value);\n\t\t\t},this);\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.calculateTotal(this.segments);\n\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor']);\n\t\t\t});\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tsegment.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\n\t\tremoveData: function(atIndex){\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\n\t\treflow : function(){\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\tsegment.update({\n\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t});\n\t\t\t}, this);\n\t\t},\n\t\tdraw : function(easeDecimal){\n\t\t\tvar animDecimal = (easeDecimal) ? easeDecimal : 1;\n\t\t\tthis.clear();\n\t\t\thelpers.each(this.segments,function(segment,index){\n\t\t\t\tsegment.transition({\n\t\t\t\t\tcircumference : this.calculateCircumference(segment.value),\n\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t},animDecimal);\n\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\n\t\t\t\tsegment.draw();\n\t\t\t\tif (index === 0){\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t}\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\tif (index < this.segments.length-1){\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t}\n\t\t\t},this);\n\n\t\t}\n\t});\n\n\tChart.types.Doughnut.extend({\n\t\tname : \"Pie\",\n\t\tdefaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})\n\t});\n\n}).call(this);\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\n\t\t///Boolean - Whether grid lines are shown across the chart\n\t\tscaleShowGridLines : true,\n\n\t\t//String - Colour of the grid lines\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n\t\t//Number - Width of the grid lines\n\t\tscaleGridLineWidth : 1,\n\n\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\tscaleShowHorizontalLines: true,\n\n\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\tscaleShowVerticalLines: true,\n\n\t\t//Boolean - Whether the line is curved between points\n\t\tbezierCurve : true,\n\n\t\t//Number - Tension of the bezier curve between points\n\t\tbezierCurveTension : 0.4,\n\n\t\t//Boolean - Whether to show a dot for each point\n\t\tpointDot : true,\n\n\t\t//Number - Radius of each point dot in pixels\n\t\tpointDotRadius : 4,\n\n\t\t//Number - Pixel width of point dot stroke\n\t\tpointDotStrokeWidth : 1,\n\n\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\tpointHitDetectionRadius : 20,\n\n\t\t//Boolean - Whether to show a stroke for datasets\n\t\tdatasetStroke : true,\n\n\t\t//Number - Pixel width of dataset stroke\n\t\tdatasetStrokeWidth : 2,\n\n\t\t//Boolean - Whether to fill the dataset with a colour\n\t\tdatasetFill : true,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n\n\t};\n\n\n\tChart.Type.extend({\n\t\tname: \"Line\",\n\t\tdefaults : defaultConfig,\n\t\tinitialize:  function(data){\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tinRange : function(mouseX){\n\t\t\t\t\treturn (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activePoints, function(activePoint){\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activePoints);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\tpoints : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t\tthis.buildScale(data.labels);\n\n\n\t\t\t\tthis.eachPoints(function(point, index){\n\t\t\t\t\thelpers.extend(point, {\n\t\t\t\t\t\tx: this.scale.calculateX(index),\n\t\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t\t});\n\t\t\t\t\tpoint.save();\n\t\t\t\t}, this);\n\n\t\t\t},this);\n\n\n\t\t\tthis.render();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.scale.update();\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t});\n\t\t\tthis.eachPoints(function(point){\n\t\t\t\tpoint.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\t\teachPoints : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t},this);\n\t\t},\n\t\tgetPointsAtEvent : function(e){\n\t\t\tvar pointsArray = [],\n\t\t\t\teventPosition = helpers.getRelativePosition(e);\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\tif (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);\n\t\t\t\t});\n\t\t\t},this);\n\t\t\treturn pointsArray;\n\t\t},\n\t\tbuildScale : function(labels){\n\t\t\tvar self = this;\n\n\t\t\tvar dataTotal = function(){\n\t\t\t\tvar values = [];\n\t\t\t\tself.eachPoints(function(point){\n\t\t\t\t\tvalues.push(point.value);\n\t\t\t\t});\n\n\t\t\t\treturn values;\n\t\t\t};\n\n\t\t\tvar scaleOptions = {\n\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\tvaluesCount : labels.length,\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\tcalculateYRange : function(currentHeight){\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t);\n\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t},\n\t\t\t\txLabels : labels,\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\tpadding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\tdisplay : this.options.showScale\n\t\t\t};\n\n\t\t\tif (this.options.scaleOverride){\n\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tthis.scale = new Chart.Scale(scaleOptions);\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tx: this.scale.calculateX(this.scale.valuesCount+1),\n\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.addXLabel(label);\n\t\t\t//Then re-render the chart.\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.removeXLabel();\n\t\t\t//Then re-render the chart.\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.points.shift();\n\t\t\t},this);\n\t\t\tthis.update();\n\t\t},\n\t\treflow : function(){\n\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width\n\t\t\t});\n\t\t\tthis.scale.update(newScaleProps);\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tthis.clear();\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\t// Some helper methods for getting the next/prev points\n\t\t\tvar hasValue = function(item){\n\t\t\t\treturn item.value !== null;\n\t\t\t},\n\t\t\tnextPoint = function(point, collection, index){\n\t\t\t\treturn helpers.findNextWhere(collection, hasValue, index) || point;\n\t\t\t},\n\t\t\tpreviousPoint = function(point, collection, index){\n\t\t\t\treturn helpers.findPreviousWhere(collection, hasValue, index) || point;\n\t\t\t};\n\n\t\t\tthis.scale.draw(easingDecimal);\n\n\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tvar pointsWithValues = helpers.where(dataset.points, hasValue);\n\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\t//We can use this extra loop to calculate the control points of this dataset also in this loop\n\n\t\t\t\thelpers.each(dataset.points, function(point, index){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.transition({\n\t\t\t\t\t\t\ty : this.scale.calculateY(point.value),\n\t\t\t\t\t\t\tx : this.scale.calculateX(index)\n\t\t\t\t\t\t}, easingDecimal);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\n\t\t\t\t// Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point\n\t\t\t\t// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed\n\t\t\t\tif (this.options.bezierCurve){\n\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\t\tvar tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;\n\t\t\t\t\t\tpoint.controlPoints = helpers.splineCurve(\n\t\t\t\t\t\t\tpreviousPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\tpoint,\n\t\t\t\t\t\t\tnextPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\ttension\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\n\t\t\t\t\t\t// Cap puter bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\tif (point.controlPoints.outer.y > this.scale.endPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.endPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (point.controlPoints.outer.y < this.scale.startPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.startPoint;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Cap inner bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\tif (point.controlPoints.inner.y > this.scale.endPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.endPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (point.controlPoints.inner.y < this.scale.startPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.startPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\t\t\t}\n\n\n\t\t\t\t//Draw the line between all the points\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\tctx.beginPath();\n\n\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tctx.moveTo(point.x, point.y);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(this.options.bezierCurve){\n\t\t\t\t\t\t\tvar previous = previousPoint(point, pointsWithValues, index);\n\n\t\t\t\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.x,\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.y,\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.x,\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y,\n\t\t\t\t\t\t\t\tpoint.x,\n\t\t\t\t\t\t\t\tpoint.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\n\t\t\t\tctx.stroke();\n\n\t\t\t\tif (this.options.datasetFill && pointsWithValues.length > 0){\n\t\t\t\t\t//Round off the line by going to the base of the chart, back to the start, then fill.\n\t\t\t\t\tctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);\n\t\t\t\t\tctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);\n\t\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\n\t\t\t\t//Now draw the points over the line\n\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t//lagging behind the point positions\n\t\t\t\thelpers.each(pointsWithValues,function(point){\n\t\t\t\t\tpoint.draw();\n\t\t\t\t});\n\t\t\t},this);\n\t\t}\n\t});\n\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\t//Cache a local reference to Chart.helpers\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\t//Boolean - Show a backdrop to the scale label\n\t\tscaleShowLabelBackdrop : true,\n\n\t\t//String - The colour of the label backdrop\n\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\n\n\t\t// Boolean - Whether the scale should begin at zero\n\t\tscaleBeginAtZero : true,\n\n\t\t//Number - The backdrop padding above & below the label in pixels\n\t\tscaleBackdropPaddingY : 2,\n\n\t\t//Number - The backdrop padding to the side of the label in pixels\n\t\tscaleBackdropPaddingX : 2,\n\n\t\t//Boolean - Show line for each value in the scale\n\t\tscaleShowLine : true,\n\n\t\t//Boolean - Stroke a line around each segment in the chart\n\t\tsegmentShowStroke : true,\n\n\t\t//String - The colour of the stroke on each segement.\n\t\tsegmentStrokeColor : \"#fff\",\n\n\t\t//Number - The width of the stroke value in pixels\n\t\tsegmentStrokeWidth : 2,\n\n\t\t//Number - Amount of animation steps\n\t\tanimationSteps : 100,\n\n\t\t//String - Animation easing effect.\n\t\tanimationEasing : \"easeOutBounce\",\n\n\t\t//Boolean - Whether to animate the rotation of the chart\n\t\tanimateRotate : true,\n\n\t\t//Boolean - Whether to animate scaling the chart from the centre\n\t\tanimateScale : false,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\n\t};\n\n\n\tChart.Type.extend({\n\t\t//Passing in a name registers this chart in the Chart namespace\n\t\tname: \"PolarArea\",\n\t\t//Providing a defaults will also register the deafults in the chart namespace\n\t\tdefaults : defaultConfig,\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\tinitialize:  function(data){\n\t\t\tthis.segments = [];\n\t\t\t//Declare segment class as a chart instance specific class, so it can share props for this instance\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tinnerRadius : 0,\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\tlineArc: true,\n\t\t\t\twidth: this.chart.width,\n\t\t\t\theight: this.chart.height,\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\tvaluesCount: data.length\n\t\t\t});\n\n\t\t\tthis.updateScaleRange(data);\n\n\t\t\tthis.scale.update();\n\n\t\t\thelpers.each(data,function(segment,index){\n\t\t\t\tthis.addData(segment,index,true);\n\t\t\t},this);\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\t\tgetSegmentsAtEvent : function(e){\n\t\t\tvar segmentsArray = [];\n\n\t\t\tvar location = helpers.getRelativePosition(e);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t},this);\n\t\t\treturn segmentsArray;\n\t\t},\n\t\taddData : function(segment, atIndex, silent){\n\t\t\tvar index = atIndex || this.segments.length;\n\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\tfillColor: segment.color,\n\t\t\t\thighlightColor: segment.highlight || segment.color,\n\t\t\t\tlabel: segment.label,\n\t\t\t\tvalue: segment.value,\n\t\t\t\touterRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),\n\t\t\t\tcircumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),\n\t\t\t\tstartAngle: Math.PI * 1.5\n\t\t\t}));\n\t\t\tif (!silent){\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t},\n\t\tremoveData: function(atIndex){\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\t\tcalculateTotal: function(data){\n\t\t\tthis.total = 0;\n\t\t\thelpers.each(data,function(segment){\n\t\t\t\tthis.total += segment.value;\n\t\t\t},this);\n\t\t\tthis.scale.valuesCount = this.segments.length;\n\t\t},\n\t\tupdateScaleRange: function(datapoints){\n\t\t\tvar valuesArray = [];\n\t\t\thelpers.each(datapoints,function(segment){\n\t\t\t\tvaluesArray.push(segment.value);\n\t\t\t});\n\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t{\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t} :\n\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\tvaluesArray,\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t);\n\n\t\t\thelpers.extend(\n\t\t\t\tthis.scale,\n\t\t\t\tscaleSizes,\n\t\t\t\t{\n\t\t\t\t\tsize: helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2\n\t\t\t\t}\n\t\t\t);\n\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.calculateTotal(this.segments);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tsegment.save();\n\t\t\t});\n\t\t\t\n\t\t\tthis.reflow();\n\t\t\tthis.render();\n\t\t},\n\t\treflow : function(){\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.updateScaleRange(this.segments);\n\t\t\tthis.scale.update();\n\n\t\t\thelpers.extend(this.scale,{\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2\n\t\t\t});\n\n\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\tsegment.update({\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t});\n\t\t\t}, this);\n\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\t//Clear & draw the canvas\n\t\t\tthis.clear();\n\t\t\thelpers.each(this.segments,function(segment, index){\n\t\t\t\tsegment.transition({\n\t\t\t\t\tcircumference : this.scale.getCircumference(),\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t},easingDecimal);\n\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\n\t\t\t\t// If we've removed the first segment we need to set the first one to\n\t\t\t\t// start at the top.\n\t\t\t\tif (index === 0){\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t}\n\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\tif (index < this.segments.length - 1){\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t}\n\t\t\t\tsegment.draw();\n\t\t\t}, this);\n\t\t\tthis.scale.draw();\n\t\t}\n\t});\n\n}).call(this);\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\n\n\tChart.Type.extend({\n\t\tname: \"Radar\",\n\t\tdefaults:{\n\t\t\t//Boolean - Whether to show lines for each scale point\n\t\t\tscaleShowLine : true,\n\n\t\t\t//Boolean - Whether we show the angle lines out of the radar\n\t\t\tangleShowLineOut : true,\n\n\t\t\t//Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels : false,\n\n\t\t\t// Boolean - Whether the scale should begin at zero\n\t\t\tscaleBeginAtZero : true,\n\n\t\t\t//String - Colour of the angle line\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\n\n\t\t\t//Number - Pixel width of the angle line\n\t\t\tangleLineWidth : 1,\n\n\t\t\t//String - Point label font declaration\n\t\t\tpointLabelFontFamily : \"'Arial'\",\n\n\t\t\t//String - Point label font weight\n\t\t\tpointLabelFontStyle : \"normal\",\n\n\t\t\t//Number - Point label font size in pixels\n\t\t\tpointLabelFontSize : 10,\n\n\t\t\t//String - Point label font colour\n\t\t\tpointLabelFontColor : \"#666\",\n\n\t\t\t//Boolean - Whether to show a dot for each point\n\t\t\tpointDot : true,\n\n\t\t\t//Number - Radius of each point dot in pixels\n\t\t\tpointDotRadius : 3,\n\n\t\t\t//Number - Pixel width of point dot stroke\n\t\t\tpointDotStrokeWidth : 1,\n\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\t\tpointHitDetectionRadius : 20,\n\n\t\t\t//Boolean - Whether to show a stroke for datasets\n\t\t\tdatasetStroke : true,\n\n\t\t\t//Number - Pixel width of dataset stroke\n\t\t\tdatasetStrokeWidth : 2,\n\n\t\t\t//Boolean - Whether to fill the dataset with a colour\n\t\t\tdatasetFill : true,\n\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n\n\t\t},\n\n\t\tinitialize: function(data){\n\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\tctx : this.chart.ctx\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\tthis.buildScale(data);\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\n\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.showTooltip(activePointsCollection);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel: dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\tpoints : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tvar pointPosition;\n\t\t\t\t\tif (!this.scale.animation){\n\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));\n\t\t\t\t\t}\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,\n\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t},this);\n\n\t\t\tthis.render();\n\t\t},\n\t\teachPoints : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t},this);\n\t\t},\n\n\t\tgetPointsAtEvent : function(evt){\n\t\t\tvar mousePosition = helpers.getRelativePosition(evt),\n\t\t\t\tfromCenter = helpers.getAngleFromPoint({\n\t\t\t\t\tx: this.scale.xCenter,\n\t\t\t\t\ty: this.scale.yCenter\n\t\t\t\t}, mousePosition);\n\n\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,\n\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),\n\t\t\t\tactivePointsCollection = [];\n\n\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.\n\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){\n\t\t\t\tpointIndex = 0;\n\t\t\t}\n\n\t\t\tif (fromCenter.distance <= this.scale.drawingArea){\n\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn activePointsCollection;\n\t\t},\n\n\t\tbuildScale : function(data){\n\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\tangleLineColor : this.options.angleLineColor,\n\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,\n\t\t\t\t// Point labels at the edge of each line\n\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,\n\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,\n\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,\n\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth: this.chart.width,\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\tlabels: data.labels,\n\t\t\t\tvaluesCount: data.datasets[0].data.length\n\t\t\t});\n\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.updateScaleRange(data.datasets);\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tupdateScaleRange: function(datasets){\n\t\t\tvar valuesArray = (function(){\n\t\t\t\tvar totalDataArray = [];\n\t\t\t\thelpers.each(datasets,function(dataset){\n\t\t\t\t\tif (dataset.data){\n\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thelpers.each(dataset.points, function(point){\n\t\t\t\t\t\t\ttotalDataArray.push(point.value);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn totalDataArray;\n\t\t\t})();\n\n\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t{\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t} :\n\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\tvaluesArray,\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t);\n\n\t\t\thelpers.extend(\n\t\t\t\tthis.scale,\n\t\t\t\tscaleSizes\n\t\t\t);\n\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\t\t\tthis.scale.valuesCount++;\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tx: pointPosition.x,\n\t\t\t\t\ty: pointPosition.y,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.labels.push(label);\n\n\t\t\tthis.reflow();\n\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.valuesCount--;\n\t\t\tthis.scale.labels.shift();\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.points.shift();\n\t\t\t},this);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.eachPoints(function(point){\n\t\t\t\tpoint.save();\n\t\t\t});\n\t\t\tthis.reflow();\n\t\t\tthis.render();\n\t\t},\n\t\treflow: function(){\n\t\t\thelpers.extend(this.scale, {\n\t\t\t\twidth : this.chart.width,\n\t\t\t\theight: this.chart.height,\n\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2\n\t\t\t});\n\t\t\tthis.updateScaleRange(this.datasets);\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easeDecimal = ease || 1,\n\t\t\t\tctx = this.chart.ctx;\n\t\t\tthis.clear();\n\t\t\tthis.scale.draw();\n\n\t\t\thelpers.each(this.datasets,function(dataset){\n\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\n\n\t\t\t\t//Draw the line between all the points\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\tctx.beginPath();\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tctx.moveTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\n\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\tctx.fill();\n\n\t\t\t\t//Now draw the points over the line\n\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t//lagging behind the point positions\n\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.draw();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t},this);\n\n\t\t}\n\n\t});\n\n\n\n\n\n}).call(this);"],"sourceRoot":"/source/"}